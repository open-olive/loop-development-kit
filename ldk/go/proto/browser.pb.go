// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: browser.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BrowserActiveURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *BrowserActiveURLRequest) Reset() {
	*x = BrowserActiveURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_browser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserActiveURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserActiveURLRequest) ProtoMessage() {}

func (x *BrowserActiveURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_browser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserActiveURLRequest.ProtoReflect.Descriptor instead.
func (*BrowserActiveURLRequest) Descriptor() ([]byte, []int) {
	return file_browser_proto_rawDescGZIP(), []int{0}
}

func (x *BrowserActiveURLRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type BrowserActiveURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *BrowserActiveURLResponse) Reset() {
	*x = BrowserActiveURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_browser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserActiveURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserActiveURLResponse) ProtoMessage() {}

func (x *BrowserActiveURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_browser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserActiveURLResponse.ProtoReflect.Descriptor instead.
func (*BrowserActiveURLResponse) Descriptor() ([]byte, []int) {
	return file_browser_proto_rawDescGZIP(), []int{1}
}

func (x *BrowserActiveURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type BrowserActiveURLStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *BrowserActiveURLStreamRequest) Reset() {
	*x = BrowserActiveURLStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_browser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserActiveURLStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserActiveURLStreamRequest) ProtoMessage() {}

func (x *BrowserActiveURLStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_browser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserActiveURLStreamRequest.ProtoReflect.Descriptor instead.
func (*BrowserActiveURLStreamRequest) Descriptor() ([]byte, []int) {
	return file_browser_proto_rawDescGZIP(), []int{2}
}

func (x *BrowserActiveURLStreamRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type BrowserActiveURLStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url   string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Error string `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BrowserActiveURLStreamResponse) Reset() {
	*x = BrowserActiveURLStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_browser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserActiveURLStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserActiveURLStreamResponse) ProtoMessage() {}

func (x *BrowserActiveURLStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_browser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserActiveURLStreamResponse.ProtoReflect.Descriptor instead.
func (*BrowserActiveURLStreamResponse) Descriptor() ([]byte, []int) {
	return file_browser_proto_rawDescGZIP(), []int{3}
}

func (x *BrowserActiveURLStreamResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BrowserActiveURLStreamResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type BrowserSelectedTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *BrowserSelectedTextRequest) Reset() {
	*x = BrowserSelectedTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_browser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserSelectedTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserSelectedTextRequest) ProtoMessage() {}

func (x *BrowserSelectedTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_browser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserSelectedTextRequest.ProtoReflect.Descriptor instead.
func (*BrowserSelectedTextRequest) Descriptor() ([]byte, []int) {
	return file_browser_proto_rawDescGZIP(), []int{4}
}

func (x *BrowserSelectedTextRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type BrowserSelectedTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	TabTitle string `protobuf:"bytes,3,opt,name=tabTitle,proto3" json:"tabTitle,omitempty"`
}

func (x *BrowserSelectedTextResponse) Reset() {
	*x = BrowserSelectedTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_browser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserSelectedTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserSelectedTextResponse) ProtoMessage() {}

func (x *BrowserSelectedTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_browser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserSelectedTextResponse.ProtoReflect.Descriptor instead.
func (*BrowserSelectedTextResponse) Descriptor() ([]byte, []int) {
	return file_browser_proto_rawDescGZIP(), []int{5}
}

func (x *BrowserSelectedTextResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BrowserSelectedTextResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BrowserSelectedTextResponse) GetTabTitle() string {
	if x != nil {
		return x.TabTitle
	}
	return ""
}

type BrowserSelectedTextStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *BrowserSelectedTextStreamRequest) Reset() {
	*x = BrowserSelectedTextStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_browser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserSelectedTextStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserSelectedTextStreamRequest) ProtoMessage() {}

func (x *BrowserSelectedTextStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_browser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserSelectedTextStreamRequest.ProtoReflect.Descriptor instead.
func (*BrowserSelectedTextStreamRequest) Descriptor() ([]byte, []int) {
	return file_browser_proto_rawDescGZIP(), []int{6}
}

func (x *BrowserSelectedTextStreamRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type BrowserSelectedTextStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	TabTitle string `protobuf:"bytes,3,opt,name=tabTitle,proto3" json:"tabTitle,omitempty"`
	Error    string `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BrowserSelectedTextStreamResponse) Reset() {
	*x = BrowserSelectedTextStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_browser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserSelectedTextStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserSelectedTextStreamResponse) ProtoMessage() {}

func (x *BrowserSelectedTextStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_browser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserSelectedTextStreamResponse.ProtoReflect.Descriptor instead.
func (*BrowserSelectedTextStreamResponse) Descriptor() ([]byte, []int) {
	return file_browser_proto_rawDescGZIP(), []int{7}
}

func (x *BrowserSelectedTextStreamResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BrowserSelectedTextStreamResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BrowserSelectedTextStreamResponse) GetTabTitle() string {
	if x != nil {
		return x.TabTitle
	}
	return ""
}

func (x *BrowserSelectedTextStreamResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_browser_proto protoreflect.FileDescriptor

var file_browser_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x17, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x18, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x49, 0x0a, 0x1d, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x1e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x46, 0x0a,
	0x1a, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x1b, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x20, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x21, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x32, 0x97, 0x03, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x53, 0x0a,
	0x10, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x55, 0x52, 0x4c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x13, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_browser_proto_rawDescOnce sync.Once
	file_browser_proto_rawDescData = file_browser_proto_rawDesc
)

func file_browser_proto_rawDescGZIP() []byte {
	file_browser_proto_rawDescOnce.Do(func() {
		file_browser_proto_rawDescData = protoimpl.X.CompressGZIP(file_browser_proto_rawDescData)
	})
	return file_browser_proto_rawDescData
}

var file_browser_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_browser_proto_goTypes = []interface{}{
	(*BrowserActiveURLRequest)(nil),           // 0: proto.BrowserActiveURLRequest
	(*BrowserActiveURLResponse)(nil),          // 1: proto.BrowserActiveURLResponse
	(*BrowserActiveURLStreamRequest)(nil),     // 2: proto.BrowserActiveURLStreamRequest
	(*BrowserActiveURLStreamResponse)(nil),    // 3: proto.BrowserActiveURLStreamResponse
	(*BrowserSelectedTextRequest)(nil),        // 4: proto.BrowserSelectedTextRequest
	(*BrowserSelectedTextResponse)(nil),       // 5: proto.BrowserSelectedTextResponse
	(*BrowserSelectedTextStreamRequest)(nil),  // 6: proto.BrowserSelectedTextStreamRequest
	(*BrowserSelectedTextStreamResponse)(nil), // 7: proto.BrowserSelectedTextStreamResponse
	(*Session)(nil),                           // 8: proto.Session
}
var file_browser_proto_depIdxs = []int32{
	8, // 0: proto.BrowserActiveURLRequest.session:type_name -> proto.Session
	8, // 1: proto.BrowserActiveURLStreamRequest.session:type_name -> proto.Session
	8, // 2: proto.BrowserSelectedTextRequest.session:type_name -> proto.Session
	8, // 3: proto.BrowserSelectedTextStreamRequest.session:type_name -> proto.Session
	0, // 4: proto.Browser.BrowserActiveURL:input_type -> proto.BrowserActiveURLRequest
	2, // 5: proto.Browser.BrowserActiveURLStream:input_type -> proto.BrowserActiveURLStreamRequest
	4, // 6: proto.Browser.BrowserSelectedText:input_type -> proto.BrowserSelectedTextRequest
	6, // 7: proto.Browser.BrowserSelectedTextStream:input_type -> proto.BrowserSelectedTextStreamRequest
	1, // 8: proto.Browser.BrowserActiveURL:output_type -> proto.BrowserActiveURLResponse
	3, // 9: proto.Browser.BrowserActiveURLStream:output_type -> proto.BrowserActiveURLStreamResponse
	5, // 10: proto.Browser.BrowserSelectedText:output_type -> proto.BrowserSelectedTextResponse
	7, // 11: proto.Browser.BrowserSelectedTextStream:output_type -> proto.BrowserSelectedTextStreamResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_browser_proto_init() }
func file_browser_proto_init() {
	if File_browser_proto != nil {
		return
	}
	file_session_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_browser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserActiveURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_browser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserActiveURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_browser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserActiveURLStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_browser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserActiveURLStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_browser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserSelectedTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_browser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserSelectedTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_browser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserSelectedTextStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_browser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserSelectedTextStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_browser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_browser_proto_goTypes,
		DependencyIndexes: file_browser_proto_depIdxs,
		MessageInfos:      file_browser_proto_msgTypes,
	}.Build()
	File_browser_proto = out.File
	file_browser_proto_rawDesc = nil
	file_browser_proto_goTypes = nil
	file_browser_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BrowserClient is the client API for Browser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BrowserClient interface {
	// get the active URL
	BrowserActiveURL(ctx context.Context, in *BrowserActiveURLRequest, opts ...grpc.CallOption) (*BrowserActiveURLResponse, error)
	// stream active URL every time it changes
	BrowserActiveURLStream(ctx context.Context, in *BrowserActiveURLStreamRequest, opts ...grpc.CallOption) (Browser_BrowserActiveURLStreamClient, error)
	// get currently selected text
	BrowserSelectedText(ctx context.Context, in *BrowserSelectedTextRequest, opts ...grpc.CallOption) (*BrowserSelectedTextResponse, error)
	// stream selected text every time it changes
	BrowserSelectedTextStream(ctx context.Context, in *BrowserSelectedTextStreamRequest, opts ...grpc.CallOption) (Browser_BrowserSelectedTextStreamClient, error)
}

type browserClient struct {
	cc grpc.ClientConnInterface
}

func NewBrowserClient(cc grpc.ClientConnInterface) BrowserClient {
	return &browserClient{cc}
}

func (c *browserClient) BrowserActiveURL(ctx context.Context, in *BrowserActiveURLRequest, opts ...grpc.CallOption) (*BrowserActiveURLResponse, error) {
	out := new(BrowserActiveURLResponse)
	err := c.cc.Invoke(ctx, "/proto.Browser/BrowserActiveURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserClient) BrowserActiveURLStream(ctx context.Context, in *BrowserActiveURLStreamRequest, opts ...grpc.CallOption) (Browser_BrowserActiveURLStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Browser_serviceDesc.Streams[0], "/proto.Browser/BrowserActiveURLStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &browserBrowserActiveURLStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Browser_BrowserActiveURLStreamClient interface {
	Recv() (*BrowserActiveURLStreamResponse, error)
	grpc.ClientStream
}

type browserBrowserActiveURLStreamClient struct {
	grpc.ClientStream
}

func (x *browserBrowserActiveURLStreamClient) Recv() (*BrowserActiveURLStreamResponse, error) {
	m := new(BrowserActiveURLStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *browserClient) BrowserSelectedText(ctx context.Context, in *BrowserSelectedTextRequest, opts ...grpc.CallOption) (*BrowserSelectedTextResponse, error) {
	out := new(BrowserSelectedTextResponse)
	err := c.cc.Invoke(ctx, "/proto.Browser/BrowserSelectedText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserClient) BrowserSelectedTextStream(ctx context.Context, in *BrowserSelectedTextStreamRequest, opts ...grpc.CallOption) (Browser_BrowserSelectedTextStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Browser_serviceDesc.Streams[1], "/proto.Browser/BrowserSelectedTextStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &browserBrowserSelectedTextStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Browser_BrowserSelectedTextStreamClient interface {
	Recv() (*BrowserSelectedTextStreamResponse, error)
	grpc.ClientStream
}

type browserBrowserSelectedTextStreamClient struct {
	grpc.ClientStream
}

func (x *browserBrowserSelectedTextStreamClient) Recv() (*BrowserSelectedTextStreamResponse, error) {
	m := new(BrowserSelectedTextStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrowserServer is the server API for Browser service.
type BrowserServer interface {
	// get the active URL
	BrowserActiveURL(context.Context, *BrowserActiveURLRequest) (*BrowserActiveURLResponse, error)
	// stream active URL every time it changes
	BrowserActiveURLStream(*BrowserActiveURLStreamRequest, Browser_BrowserActiveURLStreamServer) error
	// get currently selected text
	BrowserSelectedText(context.Context, *BrowserSelectedTextRequest) (*BrowserSelectedTextResponse, error)
	// stream selected text every time it changes
	BrowserSelectedTextStream(*BrowserSelectedTextStreamRequest, Browser_BrowserSelectedTextStreamServer) error
}

// UnimplementedBrowserServer can be embedded to have forward compatible implementations.
type UnimplementedBrowserServer struct {
}

func (*UnimplementedBrowserServer) BrowserActiveURL(context.Context, *BrowserActiveURLRequest) (*BrowserActiveURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowserActiveURL not implemented")
}
func (*UnimplementedBrowserServer) BrowserActiveURLStream(*BrowserActiveURLStreamRequest, Browser_BrowserActiveURLStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BrowserActiveURLStream not implemented")
}
func (*UnimplementedBrowserServer) BrowserSelectedText(context.Context, *BrowserSelectedTextRequest) (*BrowserSelectedTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowserSelectedText not implemented")
}
func (*UnimplementedBrowserServer) BrowserSelectedTextStream(*BrowserSelectedTextStreamRequest, Browser_BrowserSelectedTextStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BrowserSelectedTextStream not implemented")
}

func RegisterBrowserServer(s *grpc.Server, srv BrowserServer) {
	s.RegisterService(&_Browser_serviceDesc, srv)
}

func _Browser_BrowserActiveURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserActiveURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserServer).BrowserActiveURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Browser/BrowserActiveURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserServer).BrowserActiveURL(ctx, req.(*BrowserActiveURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Browser_BrowserActiveURLStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BrowserActiveURLStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrowserServer).BrowserActiveURLStream(m, &browserBrowserActiveURLStreamServer{stream})
}

type Browser_BrowserActiveURLStreamServer interface {
	Send(*BrowserActiveURLStreamResponse) error
	grpc.ServerStream
}

type browserBrowserActiveURLStreamServer struct {
	grpc.ServerStream
}

func (x *browserBrowserActiveURLStreamServer) Send(m *BrowserActiveURLStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Browser_BrowserSelectedText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserSelectedTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserServer).BrowserSelectedText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Browser/BrowserSelectedText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserServer).BrowserSelectedText(ctx, req.(*BrowserSelectedTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Browser_BrowserSelectedTextStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BrowserSelectedTextStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrowserServer).BrowserSelectedTextStream(m, &browserBrowserSelectedTextStreamServer{stream})
}

type Browser_BrowserSelectedTextStreamServer interface {
	Send(*BrowserSelectedTextStreamResponse) error
	grpc.ServerStream
}

type browserBrowserSelectedTextStreamServer struct {
	grpc.ServerStream
}

func (x *browserBrowserSelectedTextStreamServer) Send(m *BrowserSelectedTextStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Browser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Browser",
	HandlerType: (*BrowserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BrowserActiveURL",
			Handler:    _Browser_BrowserActiveURL_Handler,
		},
		{
			MethodName: "BrowserSelectedText",
			Handler:    _Browser_BrowserSelectedText_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BrowserActiveURLStream",
			Handler:       _Browser_BrowserActiveURLStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BrowserSelectedTextStream",
			Handler:       _Browser_BrowserSelectedTextStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "browser.proto",
}
